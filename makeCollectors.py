import sys
import math
from numpy.random import normal

if( len(sys.argv) < 4):
  print("Please inform mean, variance and size")
  exit(0)

print("#include \"contiki.h\"")
print("#include \"lib/random.h\"")
print("#include \"sys/ctimer.h\"")
print("#include \"sys/etimer.h\"")
print("#include \"net/uip.h\"")
print("#include \"net/uip-ds6.h\"")
print("#include \"net/uip-debug.h\"")
print("#include \"sys/node-id.h\"")
print("#include \"simple-udp.h\"")
print("#include \"powertrace.h\"")
print("#include \"servreg-hack.h\"\n")
print("#include <stdio.h>")
print("#include <string.h>\n")
print("#define UDP_PORT 1234")
print("#define SERVICE_ID 190\n")
print("#define SEND_INTERVAL		(5 * CLOCK_SECOND)")
print("#define SEND_TIME		(random_rand() % (SEND_INTERVAL))")
print("#define POWERTRACE_INTERVAL	(2 * CLOCK_SECOND)")
  
mean = int(sys.argv[1])
variance = int(sys.argv[2])
size = int(sys.argv[3])

samples_examples = normal(mean,variance,size)

print("#define DATA_SIZE %d\n" % (size))

print("int samples[%d] = {" % (size))
aux = ""
for i,e in enumerate(samples_examples):
  aux += "%d, " % (e*100)
  if i > 0 and i % 10 == 0:
    print(aux)
    aux = ""
if len(aux) > 0:
  print(aux)
print("};")

print("static struct simple_udp_connection unicast_connection;\n")
print("PROCESS(unicast_sender_process, \"Unicast sender example process\");")
print("AUTOSTART_PROCESSES(&unicast_sender_process);\n")
print("static void")
print("receiver(struct simple_udp_connection *c,")
print("         const uip_ipaddr_t *sender_addr,")
print("         uint16_t sender_port,")
print("         const uip_ipaddr_t *receiver_addr,")
print("         uint16_t receiver_port,")
print("         const uint8_t *data,")
print("         uint16_t datalen)")
print("{")
print("  printf(\"Data received on port %d from port %d with length %d\\n\",")
print("         receiver_port, sender_port, datalen);")
print("}\n")
print("static void")
print("set_global_address(void)")
print("{")
print("  uip_ipaddr_t ipaddr;")
print("  int i;")
print("  uint8_t state;\n")
print("  uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);")
print("  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);")
print("  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);\n")
print("  printf(\"IPv6 addresses: \");")
print("  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {")
print("    state = uip_ds6_if.addr_list[i].state;")
print("    if(uip_ds6_if.addr_list[i].isused &&")
print("       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {")
print("      uip_debug_ipaddr_print(&uip_ds6_if.addr_list[i].ipaddr);")
print("      printf(\"\\n\");")
print("    }")
print("  }")
print("}\n")
print("PROCESS_THREAD(unicast_sender_process, ev, data)")
print("{")
print("  static struct etimer periodic_timer;")
print("  static struct etimer send_timer;")
print("  uip_ipaddr_t *addr;\n")
print("  PROCESS_BEGIN();\n")
print("  powertrace_start(POWERTRACE_INTERVAL);")
print("  servreg_hack_init();\n")
print("  set_global_address();\n")
print("  simple_udp_register(&unicast_connection, UDP_PORT,")
print("                      NULL, UDP_PORT, receiver);\n")
print("  etimer_set(&periodic_timer, SEND_INTERVAL);")
print("  while(1) {\n")
print("    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&periodic_timer));")
print("    etimer_reset(&periodic_timer);")
print("    etimer_set(&send_timer, SEND_TIME);\n")
print("    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&send_timer));")
print("    addr = servreg_hack_lookup(SERVICE_ID);")
print("    if(addr != NULL) {")
print("      char buf[20];\n")
print("      sprintf(buf, \"%d\", samples[random_rand() % DATA_SIZE]);")
print("      simple_udp_sendto(&unicast_connection, buf, strlen(buf) + 1, addr);")
print("      printf(\"Sending unicast to \");")
print("      uip_debug_ipaddr_print(addr);")
print("      printf(\": %s \\n\", buf);")
print("    } else {")
print("      printf(\"Service %d not found\\n\", SERVICE_ID);")
print("    }")
print("  }\n")
print("  PROCESS_END();")
print("}")